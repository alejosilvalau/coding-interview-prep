class TrieNode {
    childrens: TrieNode[] | null;
    word: boolean;
    constructor() {
        this.children = Array(26).fill(null);
        this.word = false;
    }
}

class WordDictionary {
    root: TrieNode;
    constructor() {
      this.root = new TrieNode;
    }

    getIndex(char: string) {
      return char.chatCodeAt(0) - 'a'.charCodeAt(0)
    }

    addWord(word: string): void {
      let currentNode = this.root;
      for (const character of word) {
          const idx = this.getIndex(character);
          if (currentNode.childrens[idx] === null) {
              currentNode.childrens[idx] = new TrieNode();
          }
          currentNode = currentNode.childrens[idx];
      }
      currentNode.word = true;
    }

    search(word: string): boolean {
      return this.depthFirstSearch(word, 0, this.root);
    }

    depthFirstSearch(word: string, j: number, root: TreeNode) {
        let currentNode = root;

        for (let i = j; i < word.length; i++) {
            const currentChar = word[i];
            if (currentChar === '.') {
                for (const child of cur.childrens) {
                    if (child !== null && 
                        this.depthFirstSearch(word, i + 1, child) && child.word) {
                        return true;
                    }
                }
                return false;
            } else {
                const idx = this.getIndex(currentChar);  
                if (currentNode.childrens[idx] === null) {
                    return false;
                }
                currentNode = currentNode.childrens[idx];
            }
        }
        return currentNode.word;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * var obj = new WordDictionary()
 * obj.addWord(word)
 * var param_2 = obj.search(word)
 */