from typing import List

class Solution:
  def partition(self, s: str) -> List[List[str]]:
    result, curr_partition = [], []

    def backtracking(start_idx, end_idx):
      if end_idx >= len(s):
        if start_idx == end_idx:
          result.append(curr_partition.copy())
        return 

      if self.is_palindrome(s, start_idx, end_idx):
        curr_partition.append(s[start_idx: end_idx + 1])
        new_starting_idx = end_idx + 1
        backtracking(new_starting_idx, new_starting_idx)
        curr_partition.pop()
      backtracking(start_idx, end_idx + 1)

    backtracking(0, 0)
    return result

  def is_palindrome(self, word, left_idx, right_idx):
    while left_idx < right_idx:
      if word[left_idx] != word[right_idx]:
        return False
      left_idx += 1
      right_idx -= 1
    return True
