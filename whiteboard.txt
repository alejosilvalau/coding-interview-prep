/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     val: number
 *     left: TreeNode | null
 *     right: TreeNode | null
 *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.left = (left===undefined ? null : left)
 *         this.right = (right===undefined ? null : right)
 *     }
 * }
 */

function maxPathSum(root: TreeNode | null): number {
  const res = [root.val];
  depthFirstSearch(root);
  return res[0];
};

function depthFirstSearch(root: TreeNode | null, res: number[]): number {
  if (root === null) {
    return 0;
  }

  const leftMaxSum = Math.max(depthFirstSearch(root.left, res), res);
  const rightMaxSum = Math.max(depthFirstSearch(root.right, res), res);

  res[0] = Math.max(res[0], root.val + leftMaxSum + rightMaxSum);
  return root.val + Math.max(leftMaxSum, rightMaxSum);
}
